<?php
/**
 * Dependent
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  MergeHRISClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MergeHRISClient\Model;

use \ArrayAccess;
use \MergeHRISClient\ObjectSerializer;

/**
 * Dependent Class Doc Comment
 *
 * @category Class
 * @description # The Dependent Object ### Description The &#x60;Dependent&#x60; object is used to represent a dependent (e.g. child, spouse, domestic partner, etc) of an &#x60;Employee&#x60;  ### Usage Example Fetch from the &#x60;LIST Dependents&#x60; endpoint and filter by &#x60;ID&#x60; to show all dependents.
 * @package  MergeHRISClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Dependent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Dependent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'remote_id' => 'string',
        'created_at' => '\DateTime',
        'modified_at' => '\DateTime',
        'first_name' => 'string',
        'middle_name' => 'string',
        'last_name' => 'string',
        'relationship' => '\MergeHRISClient\Model\RelationshipEnum',
        'employee' => 'string',
        'date_of_birth' => '\DateTime',
        'gender' => '\MergeHRISClient\Model\GenderEnum',
        'phone_number' => 'string',
        'home_location' => 'string',
        'is_student' => 'bool',
        'ssn' => 'string',
        'remote_was_deleted' => 'bool',
        'field_mappings' => 'array<string,mixed>',
        'remote_data' => '\MergeHRISClient\Model\RemoteData[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'remote_id' => null,
        'created_at' => 'date-time',
        'modified_at' => 'date-time',
        'first_name' => null,
        'middle_name' => null,
        'last_name' => null,
        'relationship' => null,
        'employee' => 'uuid',
        'date_of_birth' => 'date-time',
        'gender' => null,
        'phone_number' => null,
        'home_location' => 'uuid',
        'is_student' => null,
        'ssn' => null,
        'remote_was_deleted' => null,
        'field_mappings' => null,
        'remote_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'remote_id' => 'remote_id',
        'created_at' => 'created_at',
        'modified_at' => 'modified_at',
        'first_name' => 'first_name',
        'middle_name' => 'middle_name',
        'last_name' => 'last_name',
        'relationship' => 'relationship',
        'employee' => 'employee',
        'date_of_birth' => 'date_of_birth',
        'gender' => 'gender',
        'phone_number' => 'phone_number',
        'home_location' => 'home_location',
        'is_student' => 'is_student',
        'ssn' => 'ssn',
        'remote_was_deleted' => 'remote_was_deleted',
        'field_mappings' => 'field_mappings',
        'remote_data' => 'remote_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'remote_id' => 'setRemoteId',
        'created_at' => 'setCreatedAt',
        'modified_at' => 'setModifiedAt',
        'first_name' => 'setFirstName',
        'middle_name' => 'setMiddleName',
        'last_name' => 'setLastName',
        'relationship' => 'setRelationship',
        'employee' => 'setEmployee',
        'date_of_birth' => 'setDateOfBirth',
        'gender' => 'setGender',
        'phone_number' => 'setPhoneNumber',
        'home_location' => 'setHomeLocation',
        'is_student' => 'setIsStudent',
        'ssn' => 'setSsn',
        'remote_was_deleted' => 'setRemoteWasDeleted',
        'field_mappings' => 'setFieldMappings',
        'remote_data' => 'setRemoteData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'remote_id' => 'getRemoteId',
        'created_at' => 'getCreatedAt',
        'modified_at' => 'getModifiedAt',
        'first_name' => 'getFirstName',
        'middle_name' => 'getMiddleName',
        'last_name' => 'getLastName',
        'relationship' => 'getRelationship',
        'employee' => 'getEmployee',
        'date_of_birth' => 'getDateOfBirth',
        'gender' => 'getGender',
        'phone_number' => 'getPhoneNumber',
        'home_location' => 'getHomeLocation',
        'is_student' => 'getIsStudent',
        'ssn' => 'getSsn',
        'remote_was_deleted' => 'getRemoteWasDeleted',
        'field_mappings' => 'getFieldMappings',
        'remote_data' => 'getRemoteData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['remote_id'] = $data['remote_id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['modified_at'] = $data['modified_at'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['middle_name'] = $data['middle_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['relationship'] = $data['relationship'] ?? null;
        $this->container['employee'] = $data['employee'] ?? null;
        $this->container['date_of_birth'] = $data['date_of_birth'] ?? null;
        $this->container['gender'] = $data['gender'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
        $this->container['home_location'] = $data['home_location'] ?? null;
        $this->container['is_student'] = $data['is_student'] ?? null;
        $this->container['ssn'] = $data['ssn'] ?? null;
        $this->container['remote_was_deleted'] = $data['remote_was_deleted'] ?? null;
        $this->container['field_mappings'] = $data['field_mappings'] ?? null;
        $this->container['remote_data'] = $data['remote_data'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 60)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['middle_name']) && (mb_strlen($this->container['middle_name']) > 60)) {
            $invalidProperties[] = "invalid value for 'middle_name', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 60)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ssn']) && (mb_strlen($this->container['ssn']) > 50)) {
            $invalidProperties[] = "invalid value for 'ssn', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets remote_id
     *
     * @return string|null
     */
    public function getRemoteId()
    {
        return $this->container['remote_id'];
    }

    /**
     * Sets remote_id
     *
     * @param string|null $remote_id The third-party API ID of the matching object.
     *
     * @return self
     */
    public function setRemoteId($remote_id)
    {
        $this->container['remote_id'] = $remote_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets modified_at
     *
     * @return \DateTime|null
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param \DateTime|null $modified_at This is the datetime that this object was last updated by Merge
     *
     * @return self
     */
    public function setModifiedAt($modified_at)
    {
        $this->container['modified_at'] = $modified_at;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The dependents's first name.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (!is_null($first_name) && (mb_strlen($first_name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Dependent., must be smaller than or equal to 60.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name The dependents's middle name.
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (!is_null($middle_name) && (mb_strlen($middle_name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $middle_name when calling Dependent., must be smaller than or equal to 60.');
        }

        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The dependents's last name.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (!is_null($last_name) && (mb_strlen($last_name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Dependent., must be smaller than or equal to 60.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets relationship
     *
     * @return RelationshipEnum|null
     */
    public function getRelationship()
    {
        return $this->container['relationship'];
    }

    /**
     * Sets relationship
     *
     * @param RelationshipEnum|null $relationship The dependent's relationship to the employee.  * `CHILD` - CHILD * `SPOUSE` - SPOUSE * `DOMESTIC_PARTNER` - DOMESTIC_PARTNER
     *
     * @return self
     */
    public function setRelationship($relationship)
    {
        $this->container['relationship'] = $relationship;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return string|null
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param string|null $employee The employee this person is a dependent of.
     *
     * @return self
     */
    public function setEmployee($employee)
    {
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime|null $date_of_birth The dependent's date of birth.
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return GenderEnum|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param GenderEnum|null $gender The dependent's gender.  * `MALE` - MALE * `FEMALE` - FEMALE * `NON-BINARY` - NON-BINARY * `OTHER` - OTHER * `PREFER_NOT_TO_DISCLOSE` - PREFER_NOT_TO_DISCLOSE
     *
     * @return self
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number The dependent's phone number.
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (!is_null($phone_number) && (mb_strlen($phone_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling Dependent., must be smaller than or equal to 50.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets home_location
     *
     * @return string|null
     */
    public function getHomeLocation()
    {
        return $this->container['home_location'];
    }

    /**
     * Sets home_location
     *
     * @param string|null $home_location The dependents's home address.
     *
     * @return self
     */
    public function setHomeLocation($home_location)
    {
        $this->container['home_location'] = $home_location;

        return $this;
    }

    /**
     * Gets is_student
     *
     * @return bool|null
     */
    public function getIsStudent()
    {
        return $this->container['is_student'];
    }

    /**
     * Sets is_student
     *
     * @param bool|null $is_student Whether or not the dependent is a student
     *
     * @return self
     */
    public function setIsStudent($is_student)
    {
        $this->container['is_student'] = $is_student;

        return $this;
    }

    /**
     * Gets ssn
     *
     * @return string|null
     */
    public function getSsn()
    {
        return $this->container['ssn'];
    }

    /**
     * Sets ssn
     *
     * @param string|null $ssn The dependents's social security number.
     *
     * @return self
     */
    public function setSsn($ssn)
    {
        if (!is_null($ssn) && (mb_strlen($ssn) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ssn when calling Dependent., must be smaller than or equal to 50.');
        }

        $this->container['ssn'] = $ssn;

        return $this;
    }

    /**
     * Gets remote_was_deleted
     *
     * @return bool|null
     */
    public function getRemoteWasDeleted()
    {
        return $this->container['remote_was_deleted'];
    }

    /**
     * Sets remote_was_deleted
     *
     * @param bool|null $remote_was_deleted Indicates whether or not this object has been deleted in the third party platform.
     *
     * @return self
     */
    public function setRemoteWasDeleted($remote_was_deleted)
    {
        $this->container['remote_was_deleted'] = $remote_was_deleted;

        return $this;
    }

    /**
     * Gets field_mappings
     *
     * @return array<string,mixed>|null
     */
    public function getFieldMappings()
    {
        return $this->container['field_mappings'];
    }

    /**
     * Sets field_mappings
     *
     * @param array<string,mixed>|null $field_mappings field_mappings
     *
     * @return self
     */
    public function setFieldMappings($field_mappings)
    {
        $this->container['field_mappings'] = $field_mappings;

        return $this;
    }

    /**
     * Gets remote_data
     *
     * @return \MergeHRISClient\Model\RemoteData[]|null
     */
    public function getRemoteData()
    {
        return $this->container['remote_data'];
    }

    /**
     * Sets remote_data
     *
     * @param \MergeHRISClient\Model\RemoteData[]|null $remote_data remote_data
     *
     * @return self
     */
    public function setRemoteData($remote_data)
    {
        $this->container['remote_data'] = $remote_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


