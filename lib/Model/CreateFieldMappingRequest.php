<?php
/**
 * CreateFieldMappingRequest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  MergeHRISClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MergeHRISClient\Model;

use \ArrayAccess;
use \MergeHRISClient\ObjectSerializer;

/**
 * CreateFieldMappingRequest Class Doc Comment
 *
 * @category Class
 * @package  MergeHRISClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CreateFieldMappingRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateFieldMappingRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'target_field_name' => 'string',
        'target_field_description' => 'string',
        'remote_field_traversal_path' => 'mixed[]',
        'remote_method' => 'string',
        'remote_url_path' => 'string',
        'common_model_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'target_field_name' => null,
        'target_field_description' => null,
        'remote_field_traversal_path' => null,
        'remote_method' => null,
        'remote_url_path' => null,
        'common_model_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'target_field_name' => 'target_field_name',
        'target_field_description' => 'target_field_description',
        'remote_field_traversal_path' => 'remote_field_traversal_path',
        'remote_method' => 'remote_method',
        'remote_url_path' => 'remote_url_path',
        'common_model_name' => 'common_model_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'target_field_name' => 'setTargetFieldName',
        'target_field_description' => 'setTargetFieldDescription',
        'remote_field_traversal_path' => 'setRemoteFieldTraversalPath',
        'remote_method' => 'setRemoteMethod',
        'remote_url_path' => 'setRemoteUrlPath',
        'common_model_name' => 'setCommonModelName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'target_field_name' => 'getTargetFieldName',
        'target_field_description' => 'getTargetFieldDescription',
        'remote_field_traversal_path' => 'getRemoteFieldTraversalPath',
        'remote_method' => 'getRemoteMethod',
        'remote_url_path' => 'getRemoteUrlPath',
        'common_model_name' => 'getCommonModelName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['target_field_name'] = $data['target_field_name'] ?? null;
        $this->container['target_field_description'] = $data['target_field_description'] ?? null;
        $this->container['remote_field_traversal_path'] = $data['remote_field_traversal_path'] ?? null;
        $this->container['remote_method'] = $data['remote_method'] ?? null;
        $this->container['remote_url_path'] = $data['remote_url_path'] ?? null;
        $this->container['common_model_name'] = $data['common_model_name'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['target_field_name'] === null) {
            $invalidProperties[] = "'target_field_name' can't be null";
        }
        if ((mb_strlen($this->container['target_field_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'target_field_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['target_field_description'] === null) {
            $invalidProperties[] = "'target_field_description' can't be null";
        }
        if ((mb_strlen($this->container['target_field_description']) < 1)) {
            $invalidProperties[] = "invalid value for 'target_field_description', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['remote_field_traversal_path'] === null) {
            $invalidProperties[] = "'remote_field_traversal_path' can't be null";
        }
        if ($this->container['remote_method'] === null) {
            $invalidProperties[] = "'remote_method' can't be null";
        }
        if ((mb_strlen($this->container['remote_method']) < 1)) {
            $invalidProperties[] = "invalid value for 'remote_method', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['remote_url_path'] === null) {
            $invalidProperties[] = "'remote_url_path' can't be null";
        }
        if ((mb_strlen($this->container['remote_url_path']) < 1)) {
            $invalidProperties[] = "invalid value for 'remote_url_path', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['common_model_name'] === null) {
            $invalidProperties[] = "'common_model_name' can't be null";
        }
        if ((mb_strlen($this->container['common_model_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'common_model_name', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets target_field_name
     *
     * @return string
     */
    public function getTargetFieldName()
    {
        return $this->container['target_field_name'];
    }

    /**
     * Sets target_field_name
     *
     * @param string $target_field_name The name of the target field you want this remote field to map to.
     *
     * @return self
     */
    public function setTargetFieldName($target_field_name)
    {

        if ((mb_strlen($target_field_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $target_field_name when calling CreateFieldMappingRequest., must be bigger than or equal to 1.');
        }

        $this->container['target_field_name'] = $target_field_name;

        return $this;
    }

    /**
     * Gets target_field_description
     *
     * @return string
     */
    public function getTargetFieldDescription()
    {
        return $this->container['target_field_description'];
    }

    /**
     * Sets target_field_description
     *
     * @param string $target_field_description The description of the target field you want this remote field to map to.
     *
     * @return self
     */
    public function setTargetFieldDescription($target_field_description)
    {

        if ((mb_strlen($target_field_description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $target_field_description when calling CreateFieldMappingRequest., must be bigger than or equal to 1.');
        }

        $this->container['target_field_description'] = $target_field_description;

        return $this;
    }

    /**
     * Gets remote_field_traversal_path
     *
     * @return mixed[]
     */
    public function getRemoteFieldTraversalPath()
    {
        return $this->container['remote_field_traversal_path'];
    }

    /**
     * Sets remote_field_traversal_path
     *
     * @param mixed[] $remote_field_traversal_path The field traversal path of the remote field listed when you hit the GET /remote-fields endpoint.
     *
     * @return self
     */
    public function setRemoteFieldTraversalPath($remote_field_traversal_path)
    {
        $this->container['remote_field_traversal_path'] = $remote_field_traversal_path;

        return $this;
    }

    /**
     * Gets remote_method
     *
     * @return string
     */
    public function getRemoteMethod()
    {
        return $this->container['remote_method'];
    }

    /**
     * Sets remote_method
     *
     * @param string $remote_method The method of the remote endpoint where the remote field is coming from.
     *
     * @return self
     */
    public function setRemoteMethod($remote_method)
    {

        if ((mb_strlen($remote_method) < 1)) {
            throw new \InvalidArgumentException('invalid length for $remote_method when calling CreateFieldMappingRequest., must be bigger than or equal to 1.');
        }

        $this->container['remote_method'] = $remote_method;

        return $this;
    }

    /**
     * Gets remote_url_path
     *
     * @return string
     */
    public function getRemoteUrlPath()
    {
        return $this->container['remote_url_path'];
    }

    /**
     * Sets remote_url_path
     *
     * @param string $remote_url_path The path of the remote endpoint where the remote field is coming from.
     *
     * @return self
     */
    public function setRemoteUrlPath($remote_url_path)
    {

        if ((mb_strlen($remote_url_path) < 1)) {
            throw new \InvalidArgumentException('invalid length for $remote_url_path when calling CreateFieldMappingRequest., must be bigger than or equal to 1.');
        }

        $this->container['remote_url_path'] = $remote_url_path;

        return $this;
    }

    /**
     * Gets common_model_name
     *
     * @return string
     */
    public function getCommonModelName()
    {
        return $this->container['common_model_name'];
    }

    /**
     * Sets common_model_name
     *
     * @param string $common_model_name The name of the Common Model that the remote field corresponds to in a given category.
     *
     * @return self
     */
    public function setCommonModelName($common_model_name)
    {

        if ((mb_strlen($common_model_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $common_model_name when calling CreateFieldMappingRequest., must be bigger than or equal to 1.');
        }

        $this->container['common_model_name'] = $common_model_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


